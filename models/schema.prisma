generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Users {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique(map: "Users_email_key") @db.VarChar(255)
  first_name          String                @db.VarChar(255)
  last_name           String                @db.VarChar(255)
  address             Json?
  phone               String?
  password            String                @db.VarChar(255)
  role                Users_Role?           @default(USER)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  stripe_id           String
  passwordResetToken  String?
  passwordResetTokenExpiration  DateTime?
  products_order      Products_Order[]     // Un utilisateur peut passer plusieurs commandes de produits
  subscriptions_order Subscriptions_Order[] // Un utilisateur peut passer plusieurs commandes d'abonnements
  posts               Post[]                // Un utilisateur peut publier plusieurs articles
  subscriptions       Subscriptions[]       // Un utilisateur peut avoir plusieurs abonnements
  favorites           Favorites[]           // Un utilisateur peut avoir plusieurs produits en favoris
}

model Products {
  id                Int            @id @default(autoincrement())
  title             String         @db.VarChar(255)
  images            Json
  price             Float          @db.Double
  slug              String         @unique(map: "Products_slug_key") @db.VarChar(255)
  composition       String         @db.Text()
  short_description String         @db.Text()
  description       String         @db.Text()
  published         Boolean
  stock             Int
  stripe_id         String
  stripe_price_id   String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  categories        Categories[]   // Plusieurs produits peuvent appartenir à plusieurs catégories
  favorites         Favorites[]    // Plusieurs produits peuvent être ajoutés aux favoris de plusieurs utilisateurs
  plan_id           Int          // Un produit peut appartenir à un seul plan (relation optionnelle)
  plan              Plans           @relation(fields: [plan_id], references: [id])
  collection_id     Int          // Un produit peut appartenir à un seul collection (relation optionnelle)
  collection        Collections     @relation(fields: [collection_id], references: [id])
}

model Ingredients {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  images      Json
  published   Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Plans {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  image         String?
  amount        Int
  stripe_id     String
  lookup_key    String?
  interval      String
  slug          String         @unique(map: "Subscriptions_slug_key") @db.VarChar(255)
  description   String         @db.Text
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  published     Boolean
  products      Products[]     // Un plan peut avoir plusieurs produits
  subscriptions Subscriptions[] // Un plan peut avoir plusieurs abonnements
}

model Subscriptions {
  id          Int       @id @default(autoincrement())
  user        Users     @relation(fields: [user_id], references: [id])
  user_id     Int
  plan        Plans      @relation(fields: [plan_id], references: [id])
  plan_id     Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  subscription_order    Subscriptions_Order[]

  @@index([user_id, plan_id])
}

model Post {
  id           Int       @id @default(autoincrement())
  body         String    @db.Text
  image        String
  title        String    @db.VarChar(255)
  description  String?   @db.VarChar(255)
  slug         String    @db.VarChar(255)
  published    Boolean
  published_at DateTime?  @default(now())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         Users     @relation(fields: [user_id], references: [id])
  user_id         Int

  @@index([user_id])
}

model Collections {
  id           Int       @id @default(autoincrement())
  image        String
  title        String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  published    Boolean
  limite       DateTime
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  products     Products[]
}

model Products_Order {
  id         Int       @id @default(autoincrement())
  user       Users     @relation(fields: [user_id], references: [id])
  user_id    Int
  products   Json
  ingredients Json?
  total      Float     @db.Double
  address    String    @db.Text
  pay        String?   @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([user_id])
}

model Subscriptions_Order {
  id              Int          @id @default(autoincrement())
  user            Users        @relation(fields: [user_id], references: [id])
  user_id         Int
  subscription    Subscriptions  @relation(fields: [subscription_id], references: [id])
  subscription_id Int
  ingredients     Json?
  pay             String        @db.VarChar(255)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@index([user_id])
}

model Categories {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  created_at DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  products  Products[]   // Une catégorie peut avoir plusieurs produits
  promo_codes Promo_Code[] // Une catégorie peut avoir plusieurs codes promotionnels
}

model Favorites {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  user        Users       @relation(fields: [user_id], references: [id])
  user_id     Int
  products    Products  @relation(fields: [product_id], references: [id])
  product_id  Int

  @@index([user_id])
}

model Promo_Code {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  reduction   Float
  expiration  DateTime
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  categories  Categories[]  // Un code promo peut appartenir à plusieurs catégories
}

model Error {
  id         Int       @id @default(autoincrement())
  message    Json
  created_at DateTime  @default(now())
}

model Medias {
  id        Int      @id @default(autoincrement())
  title     String?  @db.VarChar(255)
  alt       String?  @db.VarChar(255)
  url       String   @db.VarChar(255)
  public_id String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Users_Role {
  USER
  ADMIN
  SUPERADMIN 
}
